<!DOCTYPE html>
<html lang="es">

<head>
	<link rel="stylesheet" src="../../media/HojaEstilos.css" />
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>1a sesión curso control de versiones colaborativo con git y github</title>
</head>

<body>
	<h1>Primera sesión curso de control de versiones con git y github:</h1>
	<h2>Temas de la sesión:</h2>
	<ol>
		<li>Bienvenida y presentación entre participantes, instructor y fundación Itgrarte,</li>
		<li>Descomprimiendo Git Portable,</li>
		<li>Conociendo la estructura de carpetas de git portable,</li>
		<li><details>
			<summary>
				Introducción al control de versiones,
			</summary>
			<p>El control de versiones es una técnica utilizada en el desarrollo de 				software para gestionar y controlar los
				cambios y versiones que se realizan en el código fuente de un 				proyecto. Es una herramienta que ayuda a los
				desarrolladores a trabajar en equipo, manteniendo una copia segura 				y actualizada del código y permitiendo
				una gestión de cambios en el mismo.</p>

			<h3>El control de versiones permite:</h3>
			<ul>
				<li> Registrar y gestionar los cambios realizados en el código 				fuente.</li>
				<li> Mantener copias actualizadas del código en diferentes etapas 				del desarrollo.</li>
				<li> Trabajar en equipo en el mismo código sin que se produzcan 				conflictos.</li>
				<li> Revertir cambios y volver a versiones anteriores si es 				necesario.</li>
				<li> Identificar quién hizo qué cambio en el código fuente.</li>
				<li> Permitir una colaboración más eficiente en el desarrollo de 				software.</li>
			</ul>
			<p>Existen diferentes sistemas de control de versiones, siendo los más 				utilizados Git, SVN y Mercurial. </p>
		</details></li>
		<li><details>
			<summary>
				Introducción a la consola git CMD,
			</summary>
			<p>Git es un sistema de control de versiones muy popular para el 				desarrollo de software.</p>
			<p>Permite a los desarrolladores colaborar en proyectos y realizar un 				seguimiento de los cambios en el código.
			</p>
			<p>Git se utiliza a través de la consola de comandos, y en sistemas 				operativos Windows, la herramienta cmd se
				utiliza como la consola predeterminada.</p>

			<p>La consola de comandos es una interfaz de usuario que utiliza comandos 				de texto en lugar de una interfaz
				visual. A través de ella, se pueden realizar una gran cantidad de 				tareas, como mover archivos, instalar
				software, ejecutar procesos, entre otras.</p>

			<p>Para utilizar Git y la consola de comandos, es necesario tener 				conocimientos básicos en la utilización de
				estos. La consola se puede usar para ejecutar comandos de Git, 				como la clonación, creación de ramas,
				fusiones y envío de cambios a un servidor remoto.</p>

			<p>Es importante conocer la estructura básica de los comandos de Git, el 				funcionamiento de los repositorios y
				las características específicas del sistema operativo que se está 				utilizando. Con la práctica y la
				exploración, se pueden desarrollar habilidades avanzadas en el uso 				de Git y la consola de comandos.</p>
		</details></li>

		<li><details><summary>
			Navegación entre repositorios,
		</summary>
			Para navegar en los repositorios de Git, aquí hay algunos pasos básicos que puedes seguir:
			<ol>
				<li><p>Clonar un repositorio: El primer paso para navegar en un repositorio de Git es clonarlo en tu 					máquina local. Para hacer esto, utiliza el comando "git clone" seguido de la URL del repositorio. Por 					ejemplo:</p>
				<ol>
					<li>git clone https://github.com/nombre_usuario/nombre_repositorio.git</li>
				</ol></li>
				<li><p>Cambiar de directorio: Una vez que hayas clonado el repositorio, utiliza el comando "cd" para 					cambiar al directorio del repositorio:</p>
				<ol>
					<li>cd nombre_repositorio</li>
				</ol></li>
				<li><p>Ver ramas remotas: Puedes utilizar el comando "git branch -r" para ver las ramas remotas 					disponibles en el repositorio. Esto te mostrará una lista de las ramas que existen en el repositorio 					remoto.</p>
				</li>
				<li><p>Cambiar a una rama específica: Utiliza el comando "git checkout" seguido del nombre de la rama 					para cambiar a una rama específica. Por ejemplo:</p>
<ol>				
					<li>git checkout nombre_rama</li>
				</ol></li>
				<li><p>Ver el historial de commits: Puedes utilizar el comando 					"git log" para ver el historial de commits en la rama actual. Esto 					te mostrará información como el autor del commit, la fecha y hora, 					y el mensaje asociado.</p>
				</li>
				<li><p>Navegar en el historial de commits: Puedes utilizar 					comandos como "git diff" para ver las diferencias entre commits, 					"git show" para ver los detalles de un commit específico, y "git 					checkout" para cambiar entre diferentes commits. Estos comandos te 					permiten navegar y entender mejor el historial de cambios en el 					repositorio.</p>
				</li></ol>
			<p>Recuerda que estos son solo algunos ejemplos de comandos básicos para 				navegar en un repositorio de Git. Hay muchas más funcionalidades y 				comandos avanzados disponibles, dependiendo de tus necesidades. </p>
		</details></li>
		<li><details><summary>
			Creación de repositorios git,
		</summary>
			<p>Para crear un repositorio de Git, sigue estos pasos:</p>
			<ol>
				<li><p>Abre tu terminal o línea de comandos.</p></li>
				<li><p>Navega a la carpeta o directorio donde deseas crear el 					repositorio.</p>
				<li><p>Ejecuta el comando "git init". Esto inicializará un 					repositorio de Git vacío en la ubicación actual.</p>
				<li><p>Opcionalmente, puedes crear un archivo README.md en la 					carpeta para proporcionar información sobre el repositorio.</p></li>
				<li><p>Añade archivos al repositorio utilizando el comando "git 					add <nombre_del_archivo>" o "git add ." para añadir todos 					los archivos en la carpeta.</p></li>
				<li><p>Realiza un commit de los archivos añadidos utilizando el 					comando "git commit -m 'Mensaje del commit'". Esto guarda 					los cambios en el repositorio.</p></li>
				<li><p>Si deseas conectar tu repositorio local con un repositorio 					remoto, puedes hacerlo con el comando "git remote add origin 					<url_del_repositorio_remoto>". Reemplaza 					<url_del_repositorio_remoto> con la URL del repositorio remoto.</p></li>
				<li><p>Finalmente, puedes empujar tus cambios al repositorio 					remoto utilizando el comando "git push origin master". Esto 					enviará tus cambios al repositorio remoto.</p><br></li>
			</ol>
			<p>¡Y eso es todo!</p><br>
			<p>Ahora has creado tu propio repositorio de Git. Puedes seguir estos 				pasos adicionales para trabajar con ramas y colaborar con otros.</p>
		</details></li>
		<li><details><summary>
			configuración global y local de git,
		</summary>
			<p>Para configurar git a nivel global, puedes ejecutar los comandos:</p>
			<ol>
				<li><p>git config --global user.name "Tu nombre"</p></li>
				<li><p>git config --global user.email "tuemail@ejemplo.com"</p></li>
			</ol>
			<br><p>Esto establecerá tu nombre y dirección de correo electrónico como 				global en todas las repositorios de git que uses en tu sistema.</p><br>

			<p>Si quieres configurar git a nivel local en un repositorio específico, 				simplemente ejecuta los mismos comandos, pero sin el flag --global:</p><br>

			<ol>
				<li><p>git config user.name "Tu nombre"</p></li>
				<li><p>git config user.email "tuemail@ejemplo.com"</p></li>
			</ol><br>
			<p>Esto configurará tu nombre y dirección de correo electrónico sólo para 				el repositorio en el que estás actualmente.</p>

			<p>Puedes también usar el comando git config --list para ver todas las 				configuraciones de git en tu sistema.</p>
		</details></li>
		<li>Creación del primer commit.</li>
	</ol>

	<details>
		<summary>
			<h2>Comandos utilizados en la sesión:</h2>
		</summary>

		<dl>
			<dt>Flechas izquierda y derecha</dt>
			<dd>Revisar los comandos introducidos en la consola.</dd>
			<dt>Flechas arriba y abajo:</dt>
			<dd>Navegar en el historial de comandos ejecutados.</dd>
			<dt>Avance y retroceso de página:</dt>
			<dd>Navegar de forma rápida en el historial de comandos ejecutados.</dd>
			<dt>cd</dt>
			<dd>Navegación entre carpetas</dd>
			<dt>cd ..</dt>
			<dd>Ir hacia atrás en el árbol de directorios, es decir al directorio padre.</dd>
			<dt>ls</dt>
			<dd>Listar los archivos y carpetas de un directorio.</dd>
			<dt>dir</dt>
			<dd>Listar los archivos y carpetas de un directorio.</dd>
			<dt>mkdir</dt>
			<dd>Crear una carpeta.</dd>
			<dt>md</dt>
			<dd>crear una carpeta.</dd>
			<dt>git status</dt>
			<dd>Conocer el estado del repositorio actual</dd>
			<dt>git config --global user.name</dt>
			<dd>Conocer el usuario global de git, o establecerlo poniendo el valor entre comillas.</dd>
			<dt>git config --global user.email</dt>
			<dd>Conocer el correo electrónico global de git, o establecerlo poniendo el valor entre comillas.</dd>
			<dt>git add .</dt>
			<dd>Agrega todos los archivos que han cambiado para registrarlos en el siguiente commit</dd>
			<dt>git add --all</dt>
			<dd>Agrega todos los archivos que han cambiado para registrarlos en el siguiente commit.</dd>
			<dt>git add "nombreDeArchivo"</dt>
			<dd>Agrega un archivo específico para registrarlo en el siguiente commit</dd>
			<dt>git commit</dt>
			<dd>Crear un commit sin descripción.</dd>
			<dt>git commit -m "mensaje"</dt>
			<dd>Crear un commit con un mensaje que lo describa.</dd>
		</dl>
	</details>

	<details>
		<summary>
			<h3>Notas:</h3>
		</summary>
		<ol>
			<li>para establecer el correo electrónico global el comando sería:<br />git config --global user.email
				"correo@ejemplo.com"</li>
			<li>El correo debe ser el mismo que vamos a utilizar en la cuenta de github.</li>
			<li>El nombre de usuario es con el que estarán firmados nuestros commits.</li>
			<li>Para cambiar el usuario o correo para un repositorio específico, usamos el mismo comando sin la palabra
				--global</li>
			<li>Cuando algún comando nos da error, debemos copiar el texto que explica el error, con esa información
				podemos
				pedir ayuda en el grupo o buscar la solución en google.</li>
			<li>Podemos copiar el texto del error con el cursor de revisión de NVDA, o más fácil con el complemento
				speech
				history para NVDA.</li>
		</ol>
	</details>

	<details>
		<summary>
			<h2>Grabación de la sesión:</h2>
		</summary>

		<iframe src="https://drive.google.com/file/d/1SaFRhgGSyOeH1RLcefguUeu6JfcCJpWh/preview" width="640" height="480"
			allow="autoplay"></iframe>
		<p>Enlace a la grabación si lo prefieres <a
				href="https://drive.google.com/file/d/1SaFRhgGSyOeH1RLcefguUeu6JfcCJpWh/view?usp=sharing">Grabación de
				la
				primera sesión.</a></p>
		<a href="index.htm" role="button">Volver a la portada del curso</a>
	</details>

	<footer>
		<p><small>Josias Vásquez</small></p>
		<p><a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/"><img alt="Licencia Creative Commons"
					style="border-width:0" src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png" /></a><br />Esta
			obra está bajo una <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">Licencia Creative
				Commons Atribución-CompartirIgual 4.0 Internacional</a>.</p>
	</footer>
</body>

</html>
