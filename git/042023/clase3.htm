<!DOCTYPE html>
<html lang="es">
<head>
	<link rel="stylesheet" src="../../media/HojaEstilos.css" />
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>3a sesión curso control de versiones colaborativo con git y github</title>
</head>
<body>
	<h1>Tercera sesión curso de control de versiones con git y github:</h1>
	<h2>Temas vistos en la sesión:</h2>
	<ol>
		<li><details><summary>
			Que es el stash
		</summary>
			<p>El stash en Git es una herramienta muy útil que te permite guardar los 				cambios que aún no has registrado en un commit, pero que no quieres 				descartar ni comprometer en ese momento. El stash es útil especialmente 				cuando necesitas cambiar de rama o guardar temporalmente tus 				modificaciones para trabajar en otra tarea.</p><br>

			<p>Cuando ejecutas el comando git stash, Git guarda temporalmente tus 				cambios en una área especial llamada "stash" y revierte tu directorio de 				trabajo a la versión más reciente confirmada. Esto te permite hacer 				cambios en una rama diferente o realizar otras tareas sin comprometer tus 				modificaciones actuales.</p><br>

			<p>Puedes aplicar el stash más reciente a la rama en la que estás 				trabajando actualmente utilizando el comando git stash apply. Esto 				recuperará los cambios guardados en el stash y los aplicará sobre tu 				directorio de trabajo actual. Además, el stash no se eliminará, así que 				podrás aplicarlo nuevamente si es necesario.</p><br>

			<p>También puedes crear múltiples stashes si tienes varias tareas en 				curso. Puedes listar todos los stashes existentes utilizando el comando 				git stash list y aplicar un stash específico utilizando git stash 				apply stash@{n}, donde "n" es el índice del stash que deseas aplicar.</p><br>

			<p>El stash es una herramienta muy útil en Git para guardar temporalmente 				tus cambios sin comprometerlos en un commit y permitirte trabajar de 				manera más eficiente en diferentes ramas o tareas. </p><br>
		</details></li>
		<li><details><summary>
			Para que sirve el stash,
		</summary>
			<p>El stash en Git sirve para guardar cambios que aún no has confirmado en 				un commit, pero que no quieres descartar ni comprometer en ese momento. Al 				utilizar el stash, puedes:</p>
			<ol>
				<li><p>Cambiar de rama: Puedes usar el stash para guardar 					temporalmente tus cambios y luego cambiar a otra rama para 					trabajar en otra tarea. Después de cambiar de rama, puedes aplicar 					el stash a la nueva rama para retomar tus modificaciones donde las 					dejaste.</p>
				</li>
				<li><p>Resolver conflictos futuros: Si sabes que habrá conflictos 					en tu trabajo actual, puedes usar el stash para guardar tus 					cambios y luego aplicarlos más tarde cuando estés listo para 				resolver los conflictos.</p>
				</li>
				<li><p>Experimentar cambios: Puedes aplicar cambios en tu trabajo 					actual y, si no quedas satisfecho con los resultados, puedes hacer 					un stash de esos cambios y volver al estado anterior. Esto te 					permite experimentar libremente sin comprometer tus 					modificaciones.</p>
				</li>
				<li><p>Trabajar en múltiples tareas: Si tienes varias tareas en 					curso y necesitas cambiar de una a otra rápidamente, 					puedes usar el stash para guardar tus cambios actuales y 					aplicarlos más adelante cuando retomes cada tarea.</p>
				</li>
			</ol>
			<p>En resumen, el stash te permite guardar temporalmente tus cambios en 				una área especial para poder cambiar de rama, resolver conflictos 				o experimentar libremente. Esto te brinda una mayor flexibilidad y 				eficiencia en tu flujo de trabajo en Git.</p>
		</details></li>
		<li><details><summary>
			Cómo enviar los cambios al stash,
		</summary>
			<p>Para enviar tus cambios al stash en Git, puedes seguir los siguientes 				pasos:</p>
			<ol>
				<li><p>Asegúrate de tener cambios no confirmados en tu directorio 					de trabajo. Puedes verificarlo ejecutando el comando git status. 					Si hay cambios pendientes, deberían ser enumerados.</p>
				</li>
				<li><p>Ejecuta el comando git stash. Esto guardará tus cambios en 					un stash y limpiará tu directorio de trabajo para que quede en el 					último commit.</p>
				</li>
				<li><p>Opcionalmente, puedes añadir un mensaje descriptivo al 					stash utilizando el parámetro -m. Por ejemplo: git stash save "Mis 					cambios temporales".</p>
				</li>
				<li><p>Si tienes archivos sin seguimiento que deseas incluir en el 					stash, utiliza el parámetro -u o --include-untracked. Por ejemplo: 					git stash save -u.</p>
				</li>
				<li><p>Una vez que hayas enviado tus cambios al stash, puedes 					verificar que el stash se haya creado correctamente ejecutando el 				comando git stash list. Esto te mostrará una lista de todos los stashes 					existentes en tu repositorio.</p>

				<p>Después de enviar tus cambios al stash, puedes cambiar de rama, 					resolver conflictos o realizar otras tareas. Y cuando estés listo 					para retomar tus cambios, puedes aplicar el stash utilizando el 					comando git stash apply o git stash pop. </p>
				</li>
		</details></li>
		<li>
		<details>
			<summary>
				<p>Cómo recuperar el stash con apply y pop,</p>
			</summary>
				<h2>Cómo recuperar el stash con apply y 					pop</h2>
				<p>Para recuperar los cambios guardados en 					el stash utilizando los comandos "apply" y 					"pop" en Git, puedes seguir estos pasos:</p>
					<ul>
					<li>
					<p>Verifica el stash actual disponible 					en tu repositorio Git utilizando el 					comando git stash list. Esto te 						mostrará una lista de todos los 						stashes que has creado en tu 						repositorio.</p>
					</li>
					<li>
						<p>Si deseas aplicar los cambios 							de un stash específico pero 							mantenerlo almacenado en el 							stash, utiliza el comando git stash apply stash@{n}, donde "n" es el número del stash 						que deseas aplicar. Por ejemplo, si deseas aplicar los cambios del segundo stash, utilizarías git stash apply stash@{1}.</p>
					</li>
					<li>
<p>Si deseas aplicar los cambios de un stash específico y eliminarlo del stash, puedes usar el comando git stash pop stash@{n}. Esto aplicará los cambios del stash seleccionado y lo eliminará del stash. Por ejemplo, para aplicar y eliminar el segundo stash, puedes utilizar git stash pop stash@{1}.</p>
					</li>
				</ul>
<p>Recuerda que al aplicar o hacer un "pop" del stash, los cambios se aplicarán a tu rama actual. Asegúrate de estar en la rama correcta antes de ejecutar estos comandos. </p>
				
		</details>
		</li>
		<li>
		<details>
		<summary>
			Cómo borrar elementos del stash.
		</summary>
		<h2>Cómo borrar elementos del stash</h2>
			>p>Para borrar elementos de un stash en Git, 				puedes utilizar el comando "drop". Aquí tienes 				los pasos a seguir:</p>
			<ul>
				<li><p>Verifica el stash actual disponible 					en tu repositorio Git utilizando el 					comando git stash list. Esto te 					mostrará una lista de todos los 					stashes que has creado en tu 					repositorio.</p></li>

				<li><p>Identifica el número del stash que 					deseas borrar de la lista.</p></li>

				<li><p>Utiliza el comando git stash drop 					stash@{n}, donde "n" es el número del 						stash que deseas eliminar. Por 					ejemplo, si deseas borrar el segundo 					stash, utilizarías git stash drop 					stash@{1}.</p></li>
			</ul>
			<p>Ten en cuenta que al usar el comando 				"drop", el stash seleccionado se borrará 				permanentemente y no se podrá recuperar. 				Asegúrate de verificar cuidadosamente qué 				stash deseas eliminar antes de ejecutar este 				comando.</p>
		</details>
		</li>
		<li>
		<details>
		<summary>
			Cómo limpiar el stash.
		</summary>
		<h2>Cómo limpiar el stash.</h2>
			<p>Para limpiar completamente el stash y eliminar todos los stashes guardados, puedes utilizar el comando "clear" en lugar de "drop". Aquí tienes los pasos a seguir:</p>
			<ul>
				<li><p>Verifica el stash actual disponible en tu repositorio Git utilizando el comando git stash list.</p></li>

<li><p>Si deseas eliminar todos los stashes, simplemente utiliza el comando git stash clear. Esto eliminará todos los stashes guardados en tu repositorio. Ten en cuenta que esta acción no se puede deshacer y los cambios se perderán permanentemente.</p></li>

<li><p>Después de ejecutar el comando "clear", puedes verificar nuevamente el stash utilizando git stash list para confirmar que todos los stashes se han eliminado correctamente.</p></li>
				</ul>
<p>Recuerda tener cuidado al utilizar el comando "clear" ya que eliminará todos los stashes de tu repositorio sin posibilidad de recuperación. Asegúrate de hacer una copia de seguridad de los cambios importantes antes de utilizar este comando. </p>
		</details>
		</li>
		<li>
		<details>
		<summary>
		Como trabajar con ramas.
		</summary>
		<h2>Como trabajar con ramas</h2>
			<p>Trabajar con ramas en Git es una práctica común y útil para organizar y desarrollar características o correcciones de manera independiente. Aquí hay algunos pasos básicos para trabajar con ramas:</p>
			<ul>
				<li><p>Crear una nueva rama: Puedes crear una nueva rama utilizando el comando git branch nombre-de-la-rama. Por ejemplo, si quieres crear una rama llamada "nueva-funcionalidad", ejecuta git branch nueva-funcionalidad. Esto creará una nueva rama basada en la rama actual en la que te encuentres.</p></li>

<li><p>Cambiar a una rama existente: Puedes cambiar a una rama existente utilizando el comando git checkout nombre-de-la-rama. Por ejemplo, si quieres cambiar a la rama "nueva-funcionalidad", ejecuta git checkout nueva-funcionalidad. Esto cambiará tu entorno de trabajo a la rama especificada.</p></li>

<li><p>Realizar cambios en la rama: Trabaja en la rama seleccionada realizando los cambios necesarios en tus archivos.</p></li>

<li><p>Agregar y confirmar los cambios: Utiliza los comandos git add <archivo> y git commit -m "mensaje del commit" para agregar y confirmar los cambios en la rama actual.</p></li>

<li><p>Fusionar ramas: Una vez que hayas completado los cambios en la rama y quieres integrar esos cambios en otra rama, puedes utilizar el comando git merge. Cambia a la rama objetivo (la que quieres fusionar) utilizando git checkout nombre-de-la-rama-objetivo. Luego, ejecuta git merge nombre-de-la-rama para fusionar la rama actual con la rama objetivo.</p></li>

<li><p>Eliminar una rama: Si ya no necesitas una rama, puedes eliminarla utilizando el comando git branch -d nombre-de-la-rama. Por ejemplo, para eliminar la rama "nueva-funcionalidad", ejecuta git branch -d nueva-funcionalidad. Ten en cuenta que no puedes eliminar la rama en la que te encuentras actualmente.</p></li>
			</ul>
<p>Estos son solo algunos de los comandos más comunes para trabajar con ramas en Git. Puedes explorar otras funcionalidades y opciones para administrar las ramas, como renombrar una rama o fusionar ramas de forma más avanzada, consultando la documentación oficial de Git.</p>
		</details>
		</li>
		<li>
		<details>
		<summary>
		Cómo eliminar ramas.
		</summary>
		<h2>Cómo eliminar ramas</h2>
		<p>Para eliminar una rama en Git, puedes seguir los siguientes pasos:</p>
			<ul>
<li><p>Asegúrate de no estar en la rama que deseas eliminar. Puedes cambiar de rama utilizando el comando git checkout nombre-de-la-rama para cambiar a otra rama existente.</p></li>

<li><p>Puedes verificar la lista de ramas disponibles utilizando el comando git branch.</p></li>

<li><p>Una vez que estés en una rama diferente a la que deseas eliminar, ejecuta el comando git branch -d nombre-de-la-rama para eliminar la rama. Por ejemplo, si quieres eliminar la rama "nueva-funcionalidad", ejecuta git branch -d nueva-funcionalidad.</p></li>

<li><p>Si hubo commits sin fusionar en la rama que intentas eliminar, Git te mostrará un mensaje de advertencia. Puedes forzar la eliminación de la rama utilizando el comando git branch -D nombre-de-la-rama. Ten en cuenta que esto eliminará cualquier trabajo que no esté fusionado en la rama.</p></li>
			</ul>
<p>Recuerda que una vez que eliminas una rama, no se puede recuperar a menos que hayas realizado una copia de seguridad previamente. Si tienes dudas sobre si eliminar una rama o no, siempre es recomendable crear una copia de seguridad antes de hacerlo.</p>

<p>Es importante destacar que eliminar una rama no afectará a la rama principal (generalmente llamada "master" o "main"). La rama eliminada simplemente dejará de existir, pero el historial de commits estará presente.</p>
		</details>
		</li>
		<li>
		<details>
		<summary>
		Como combinar ramas,
		</summary>
		<h2>Como combinar ramas</h2>
		<p>Para combinar ramas en Git, puedes seguir los siguientes pasos:</p>
			<ul>
<li><p>Asegúrate de estar en la rama en la que deseas incorporar los cambios de otra rama. Puedes cambiar de rama utilizando el comando git checkout nombre-de-la-rama.</p></li>

<li><p>Ejecuta el comando git merge nombre-de-la-rama-a-combinar. Por ejemplo, si deseas combinar la rama "nueva-funcionalidad" con la rama en la que te encuentras, ejecuta git merge nueva-funcionalidad.</p></li>

<li><p>Git intentará automáticamente fusionar los cambios de la rama especificada con la rama actual. Si no hay conflictos, Git realizará la fusión automáticamente y mostrará un mensaje indicando que la fusión fue exitosa.</p></li>

<li><p>Si hay conflictos, Git te mostrará un mensaje indicando los archivos con conflictos. Debes resolver los conflictos manualmente editando los archivos en conflicto y eliminando las marcas de conflictos. Después, debes ejecutar el comando git add nombre-del-archivo-modificado para marcar los conflictos como resueltos. Una vez que hayas resuelto todos los conflictos, puedes ejecutar git merge --continue para completar la fusión.</p></li>

<li><p>Una vez que hayas completado la fusión correctamente, puedes eliminar la rama que ya has combinado utilizando el comando git branch -d nombre-de-la-rama-a-combinar. Sin embargo, ten en cuenta que esto solo se puede hacer si no necesitas conservar otra referencia a esa rama.</p></li>
			</ul>
<p>Recuerda que durante el proceso de fusión puedes utilizar comandos como git status o git diff para ver el estado de los archivos y los cambios realizados.</p>

<p>Es importante tener en cuenta que siempre es recomendable realizar una copia de seguridad o trabajar en una rama separada antes de combinar ramas, especialmente si los cambios son importantes o si la fusión puede afectar el código existente de manera significativa.</p>
		</details>
		</li>
		<li>
		<details>
		<summary>
			Como cambiar la base de una rama.
		</summary>
		<h2>Como cambiar la base de una rama</h2>
			<p>Cambiar la base de una rama en Git implica reubicar el punto de inicio de la rama en otro commit. Puedes seguir los siguientes pasos para cambiar la base de una rama:</p>
		<ul>
<li><p>Asegúrate de tener un repositorio Git en tu sistema local y de estar en la rama que deseas modificar.<up></li>

<li><p>Crea una nueva rama temporal (por ejemplo, "nueva-base") desde la rama a la cual deseas cambiar su base. Esto se hace para evitar perder cambios en caso de que algo salga mal durante el proceso. Puedes crear la rama temporal ejecutando el siguiente comando: git branch nueva-base.</p></li>

<li><p>Cambia a la nueva rama temporal que has creado utilizando el comando git checkout nueva-base.</p></li>

<li><p>Utiliza el comando git rebase --onto nombre-de-la-rama-nueva nombre-del-commit-inicial nombre-de-la-rama-a-modificar. Esto indica a Git que tome todos los commits desde el commit inicial especificado hasta el HEAD de la rama a modificar y los coloque en la nueva rama especificada. Por ejemplo, si deseas cambiar la base de la rama "rama-a-modificar" a la rama "rama-nueva" a partir del commit "commit-inicial", ejecuta el siguiente comando: git rebase --onto rama-nueva commit-inicial rama-a-modificar.</p></li>

<li><p>Git realizará el rebasing y reubicará los cambios de la rama a modificar sobre la nueva base. Si hay conflictos, Git te los mostrará y deberás resolverlos manualmente siguiendo las instrucciones que te brinda Git. Puedes editar los archivos en conflicto y luego utilizar el comando git add nombre-del-archivo-modificado para marcar los conflictos como resueltos. Después, ejecuta git rebase --continue para continuar con el proceso de rebasing.</p></li>

<li><p>Una vez completado el rebasing sin conflictos, la rama a modificar ahora tiene una nueva base. Puedes verificar esto revisando el historial de commits y asegurándote de que se hayan aplicado correctamente los cambios.</p></li>

<li><p>Si necesitas eliminar la rama temporal que se creó en el paso 2 (por ejemplo, "nueva-base"), puedes utilizar el comando git branch -d nueva-base.</p></li>
			</ul>
<p>Recuerda que cambiar la base de una rama es una operación que modifica el historial de los commits y, por lo tanto, puede tener un impacto en el trabajo de otros colaboradores. Se recomienda comunicar y coordinar estos cambios con el equipo antes de realizarlos.</p>
		</details>
		</li>
		<li>
		<details>
		<summary>
			Solucionar errores de combinación de ramas.
		</summary>
		<h2>Solucionar errores de combinación de ramas</h2>
		<p>Si encuentras errores de conflicto al fusionar ramas en Git, puedes seguir los siguientes pasos para resolverlos:</p>
		<ul>
<li><p>Asegúrate de estar en la rama donde deseas fusionar los cambios. Por ejemplo, si deseas fusionar la rama "rama-a" en la rama actual, ejecuta el comando git checkout rama-actual.</p></li>

<li><p>Ejecuta el comando git merge rama-a para fusionar la rama "rama-a" en la rama actual. Si hay conflictos, Git te mostrará un mensaje indicando los archivos conflictivos y te pedirá que los resuelvas.</p></li>

<li><p>Abre los archivos en conflicto y busca las líneas marcadas con "<<<<<<<", "=======" y ">>>>>>>". Estas líneas dividen las partes en conflicto del archivo.</p></li>

<li><p>Edita el archivo, resolviendo los conflictos y conservando solo las partes que deseas mantener. Asegúrate de eliminar las líneas marcadas con "<<<<<<<", "=======" y ">>>>>>>" una vez que hayas tomado tu decisión sobre las partes conflictivas.</p></li>

<li><p>Una vez que hayas resuelto los conflictos en todos los archivos, utiliza el comando git add nombre-del-archivo-modificado para marcarlos como resueltos. Puedes agregar varios archivos separándolos con espacios o utilizar git add . para agregar todos los archivos modificados.</p></li>

<li><p>Ejecuta el comando git commit para crear un nuevo commit que registre los cambios resueltos.</p></li>

<li><p>Si Git muestra más conflictos, repite los pasos 3-6 hasta que hayas resuelto todos los conflictos. Puedes utilizar git status en cualquier momento para ver el estado actual de la fusión.</p></li>

<li><p>Una vez que hayas resuelto todos los conflictos y realizado todos los commits necesarios, puedes utilizar git log para verificar que la fusión se haya completado correctamente y los cambios estén incorporados en la rama actual.</p></li>
		</ul>

<p>Recuerda que la resolución de conflictos es un proceso manual y requiere tomar decisiones sobre qué cambios deseas conservar. Es importante comunicarse y colaborar con otros colaboradores si estás fusionando ramas compartidas en un proyecto de equipo. </p>
		</details>
		</li>
		<li>
		<details>
		<summary>
		Limpiar archivos sin seguimiento del repositorio.
		</summary>
		<h2>Limpiar archivos sin seguimiento del repositorio</h2>
		<p>Para limpiar los archivos sin seguimiento en un repositorio Git, puedes seguir estos pasos:</p>
		<ul>
<li><p>Asegúrate de guardar cualquier cambio o modificación que hayas realizado en tus archivos rastreados. Puedes utilizar git stash para guardar temporalmente tus cambios si no deseas confirmarlos aún.</p></li>

<li><p>Ejecuta el comando git clean -n para obtener una vista previa de los archivos que se eliminarán. Esto mostrará una lista de los archivos no rastreados que están actualmente presentes en el repositorio.</p></li>

<li><p>Verifica cuidadosamente la lista de archivos que se enumeran en el paso anterior. Asegúrate de que los archivos enumerados sean realmente los que deseas eliminar. Si hay archivos que no deseas eliminar, asegúrate de agregarlos al archivo .gitignore para evitar que se rastreen en el futuro.</p></li>

<li><p>Una vez que estés seguro de los archivos que deseas eliminar, ejecuta el comando git clean -f para eliminar los archivos sin seguimiento de forma permanente.</p></li>
		</ul>
<p>Recuerda que esta operación es irreversible, por lo que es importante verificar dos veces la lista de archivos antes de ejecutar el comando `git clean -f`.
Además, el comando `git clean` eliminará solo archivos sin seguimiento, no afectará los archivos rastreados ni los cambios en las ramas y commits existentes. </p>
		</details>
		</li>
		<li>Como configurar el archivo .gitignore</li>
	</ol>

	<details><summary>
		<h2>Comandos vistos en la sesión:</h2>
	</summary>
		<dl>
			<dt>git stash</dt>
			<dd>Agrega los cambios sin confirmar al stash, la entrada del stash tendrá 				como descripción el identificador del
				último commit.</dd>
			<dt>git stash save "Mensaje"</dt>
			<dd>Agrega los cambios sin confirmar al stash, con una descripción para 				ubicar mejor la entrada del stash</dd>
			<dt>git stash list</dt>
			<dd>Muestra una lista de las entradas del stash, indicando cada entrada 				con un índice, siendo @{0} el índice de la
				última entrada agregada al stash</dd>
			<dt>git stash apply</dt>
			<dd>aplica (recupera) la última entrada del stash que tiene el índice 0. 				Aunque recupera la entrada no la borra del
				stash.</dd>
			<dt>git stash apply stash@{1}</dt>
			<dd>aplica la entrada del stash con el índice 1, se puede recuperar otra 				entrada del stash modificando el número
				entre llaves por el número de índice según corresponda. Aunque 				recupera la
				entrada no la borra del stash.</dd>
			<dt>git stash pop</dt>
			<dd>Recupera la última entrada agregada al stash, la que tiene el índice 				0; A diferencia del comando con apply, este
				comando si borra la entrada del stash.</dd>
			<dt>git stash pop stash@{1}</dt>
			<dd>Recupera la entrada del stash con índice 1, se puede elegir otra 				entrada del stash modificando el número entre
				llaves por el que corresponda. A diferencia del comando con apply, 				este comando si borra la entrada del stash.
			</dd>
			<dt>git stash drop</dt>
			<dd>elimina la última entrada del stash con índice 0.</dd>
			<dt>git stash drop stash@{1}</dt>
			<dd>elimina la entrada del stash con índice 1. Se puede eliminar otra 				entrada del stash modificando el número entre
				llaves según corresponda.</dd>
			<dt>git stash clear</dt>
			<dd>Borra todas las entradas del stash.</dd>
			<dt>git tag -d etiqueta</dt>
			<dd>Elimina la etiqueta indicada</dd>
			<dt>git tag -D etiqueta</dt>
			<dd>Fuerza la eliminación de la etiqueta cuando el comando anterior da 				error.</dd>
			<dt>git branch -d nombre de rama</dt>
			<dd>elimina la rama indicada.</dd>
			<dt>git branch -D nombre_rama</dt>
			<dd>Fuerza la eliminación de la rama cuando el comando anterior da error.</		dd>
			<dt>git merge nombre de rama</dt>
			<dd>Combina la rama indicada con la rama actual</dd>
			<dt>git rebase nombre de rama</dt>
			<dd>Cambia la base de la rama actual a el último commit de la rama 			indicada.</dd>
			<dt>git clean -f</dt>
			<dd>elimina los archivos que no tienen seguimiento del repositorio.</dd>
		</dl>
	</details>
	<details><summary>
		<h2>Grabación de la sesión:</h2>
	</summary>
		<p>nota: recomiendo adelantar la grabación al minuto 35, por toda la parte 			experimental que tuvimos al principio de la
			clase intentando replicar el error de cambios no confirmados.</p>
		<iframe src="https://drive.google.com/file/			d/1mRp7z15jqfLR9zWuzjFeV7ys8jMXOdgj/			preview" width="640" height="480"
			allow="autoplay"></iframe>
		<p>Enlace a la grabación si lo prefieres <a
				href="https://drive.google.com/file/d/1mRp7z15jqfLR9zWuzjFeV7ys8jMXOdgj/view?usp=share_link">Grabación tercera
				sesión</a></p>
<a href="index.htm" role="button">Volver a la portada del curso</a>
	</details>
<footer>
	<p><small>Josias Vásquez</small></p>
	<p><a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/"><img alt="Licencia Creative Commons" style="border-width:0" src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png" /></a><br />Esta obra está bajo una <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">Licencia Creative Commons Atribución-CompartirIgual 4.0 Internacional</a>.</p>
</footer>
</body>
</html>
