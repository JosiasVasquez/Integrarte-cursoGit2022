<!DOCTYPE html>
<html lang="es">
<head>
	<link rel="stylesheet" src="../../media/HojaEstilos.css" />
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>3a sesión curso control de versiones colaborativo con git y github</title>
</head>
<body>
	<h1>Tercera sesión curso de control de versiones con git y github:</h1>
	<h2>Temas vistos en la sesión:</h2>
	<ol>
		<li><details><summary>
			Que es el stash
		</summary>
			<p>El stash en Git es una herramienta muy útil que te permite guardar los 				cambios que aún no has registrado en un commit, pero que no quieres 				descartar ni comprometer en ese momento. El stash es útil especialmente 				cuando necesitas cambiar de rama o guardar temporalmente tus 				modificaciones para trabajar en otra tarea.</p><br>

			<p>Cuando ejecutas el comando git stash, Git guarda temporalmente tus 				cambios en una área especial llamada "stash" y revierte tu directorio de 				trabajo a la versión más reciente confirmada. Esto te permite hacer 				cambios en una rama diferente o realizar otras tareas sin comprometer tus 				modificaciones actuales.</p><br>

			<p>Puedes aplicar el stash más reciente a la rama en la que estás 				trabajando actualmente utilizando el comando git stash apply. Esto 				recuperará los cambios guardados en el stash y los aplicará sobre tu 				directorio de trabajo actual. Además, el stash no se eliminará, así que 				podrás aplicarlo nuevamente si es necesario.</p><br>

			<p>También puedes crear múltiples stashes si tienes varias tareas en 				curso. Puedes listar todos los stashes existentes utilizando el comando 				git stash list y aplicar un stash específico utilizando git stash 				apply stash@{n}, donde "n" es el índice del stash que deseas aplicar.</p><br>

			<p>El stash es una herramienta muy útil en Git para guardar temporalmente 				tus cambios sin comprometerlos en un commit y permitirte trabajar de 				manera más eficiente en diferentes ramas o tareas. </p><br>
		</details></li>
		<li><details><summary>
			Para que sirve el stash,
		</summary>
			<p>El stash en Git sirve para guardar cambios que aún no has confirmado en 				un commit, pero que no quieres descartar ni comprometer en ese momento. Al 				utilizar el stash, puedes:</p>
			<ol>
				<li><p>Cambiar de rama: Puedes usar el stash para guardar 					temporalmente tus cambios y luego cambiar a otra rama para 					trabajar en otra tarea. Después de cambiar de rama, puedes aplicar 					el stash a la nueva rama para retomar tus modificaciones donde las 					dejaste.</p>
				</li>
				<li><p>Resolver conflictos futuros: Si sabes que habrá conflictos 					en tu trabajo actual, puedes usar el stash para guardar tus 					cambios y luego aplicarlos más tarde cuando estés listo para 				resolver los conflictos.</p>
				</li>
				<li><p>Experimentar cambios: Puedes aplicar cambios en tu trabajo 					actual y, si no quedas satisfecho con los resultados, puedes hacer 					un stash de esos cambios y volver al estado anterior. Esto te 					permite experimentar libremente sin comprometer tus 					modificaciones.</p>
				</li>
				<li><p>Trabajar en múltiples tareas: Si tienes varias tareas en 					curso y necesitas cambiar de una a otra rápidamente, 					puedes usar el stash para guardar tus cambios actuales y 					aplicarlos más adelante cuando retomes cada tarea.</p>
				</li>
			</ol>
			<p>En resumen, el stash te permite guardar temporalmente tus cambios en 				una área especial para poder cambiar de rama, resolver conflictos 				o experimentar libremente. Esto te brinda una mayor flexibilidad y 				eficiencia en tu flujo de trabajo en Git.</p>
		</details></li>
		<li>Cómo enviar los cambios al stash,</li>
		<li>Cómo recuperar el stash con apply y pop.</li>
		<li>Cómo borrar elementos del stash.</li>
		<li>Cómo limpiar el stash.</li>
		<li>Como trabajar con ramas.</li>
		<li>Cómo eliminar ramas.</li>
		<li>Como combinar ramas,</li>
		<li>Como cambiar la base de una rama.</li>
		<li>Solucionar errores de combinación de ramas.</li>
		<li>Limpiar archivos sin seguimiento del repositorio</li>
		<li>Como configurar el archivo .gitignore</li>
	</ol>

	<details><summary>
		<h2>Comandos vistos en la sesión:</h2>
	</summary>
		<dl>
			<dt>git stash</dt>
			<dd>Agrega los cambios sin confirmar al stash, la entrada del stash tendrá 				como descripción el identificador del
				último commit.</dd>
			<dt>git stash save "Mensaje"</dt>
			<dd>Agrega los cambios sin confirmar al stash, con una descripción para 				ubicar mejor la entrada del stash</dd>
			<dt>git stash list</dt>
			<dd>Muestra una lista de las entradas del stash, indicando cada entrada 				con un índice, siendo @{0} el índice de la
				última entrada agregada al stash</dd>
			<dt>git stash apply</dt>
			<dd>aplica (recupera) la última entrada del stash que tiene el índice 0. 				Aunque recupera la entrada no la borra del
				stash.</dd>
			<dt>git stash apply stash@{1}</dt>
			<dd>aplica la entrada del stash con el índice 1, se puede recuperar otra 				entrada del stash modificando el número
				entre llaves por el número de índice según corresponda. Aunque 				recupera la
				entrada no la borra del stash.</dd>
			<dt>git stash pop</dt>
			<dd>Recupera la última entrada agregada al stash, la que tiene el índice 				0; A diferencia del comando con apply, este
				comando si borra la entrada del stash.</dd>
			<dt>git stash pop stash@{1}</dt>
			<dd>Recupera la entrada del stash con índice 1, se puede elegir otra 				entrada del stash modificando el número entre
				llaves por el que corresponda. A diferencia del comando con apply, 				este comando si borra la entrada del stash.
			</dd>
			<dt>git stash drop</dt>
			<dd>elimina la última entrada del stash con índice 0.</dd>
			<dt>git stash drop stash@{1}</dt>
			<dd>elimina la entrada del stash con índice 1. Se puede eliminar otra 				entrada del stash modificando el número entre
				llaves según corresponda.</dd>
			<dt>git stash clear</dt>
			<dd>Borra todas las entradas del stash.</dd>
			<dt>git tag -d etiqueta</dt>
			<dd>Elimina la etiqueta indicada</dd>
			<dt>git tag -D etiqueta</dt>
			<dd>Fuerza la eliminación de la etiqueta cuando el comando anterior da 				error.</dd>
			<dt>git branch -d nombre de rama</dt>
			<dd>elimina la rama indicada.</dd>
			<dt>git branch -D nombre_rama</dt>
			<dd>Fuerza la eliminación de la rama cuando el comando anterior da error.</		dd>
			<dt>git merge nombre de rama</dt>
			<dd>Combina la rama indicada con la rama actual</dd>
			<dt>git rebase nombre de rama</dt>
			<dd>Cambia la base de la rama actual a el último commit de la rama 			indicada.</dd>
			<dt>git clean -f</dt>
			<dd>elimina los archivos que no tienen seguimiento del repositorio.</dd>
		</dl>
	</details>
	<details><summary>
		<h2>Grabación de la sesión:</h2>
	</summary>
		<p>nota: recomiendo adelantar la grabación al minuto 35, por toda la parte 			experimental que tuvimos al principio de la
			clase intentando replicar el error de cambios no confirmados.</p>
		<iframe src="https://drive.google.com/file/			d/1mRp7z15jqfLR9zWuzjFeV7ys8jMXOdgj/			preview" width="640" height="480"
			allow="autoplay"></iframe>
		<p>Enlace a la grabación si lo prefieres <a
				href="https://drive.google.com/file/d/1mRp7z15jqfLR9zWuzjFeV7ys8jMXOdgj/view?usp=share_link">Grabación tercera
				sesión</a></p>
<a href="index.htm" role="button">Volver a la portada del curso</a>
	</details>
<footer>
	<p><small>Josias Vásquez</small></p>
	<p><a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/"><img alt="Licencia Creative Commons" style="border-width:0" src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png" /></a><br />Esta obra está bajo una <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">Licencia Creative Commons Atribución-CompartirIgual 4.0 Internacional</a>.</p>
</footer>
</body>
</html>
